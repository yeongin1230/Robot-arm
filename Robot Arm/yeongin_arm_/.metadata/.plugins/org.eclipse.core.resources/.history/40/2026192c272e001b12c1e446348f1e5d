/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "i2s.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "usb_host.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
bool distance_flag = false;

uint8_t rx3_data = 0;

uint8_t go_left = 1;
uint8_t go_right = 2;
uint8_t turn_right_go = 3;
uint8_t turn_right_stop = 4;

int MOTOR_PWM[5];
int MOTOR_PWM_MEAN[5];
int MOTOR_PWM_MAX[5];
int MOTOR_PWM_MIN[5];
int mode[5]={1,1,1,1,1};
char direction;
char response;

volatile uint32_t distance;
#define Delay_ms     HAL_Delay
#define millis()     HAL_GetTick()
#define SYS_CLOCK    168
#define SYSTICK_LOAD 167999
__IO uint32_t uwTick=0;
extern __IO uint32_t uwTick;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros() {
  return (uwTick&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
}

void Delay_us(uint32_t us) {
  uint32_t temp = micros();
  uint32_t comp = temp + us;
  uint8_t  flag = 0;
  while(comp > temp){
    if(((uwTick&0x3FFFFF)==0)&&(flag==0)){
      flag = 1;
    }
    if(flag) temp = micros() + 0x400000UL * 1000;
    else     temp = micros();
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //External interrupt for Sonar
{
	static uint32_t ss=0;
	uint32_t temp = GPIOC->IDR & 0x0002;//PC1이니까 2^(1)=2
	switch (temp) {
	  case 0x0002:
		 ss = micros();
		 break;

	  case 0x0000 :
		 distance = (micros() - ss) / 58;
		 if(distance <= 3){
			 distance_flag = true;
		 }
		 break;
	}
}

void TEST(void)
{	//pwm[1](관절3)-120, pwm[4](관절2)-620, pwm[2](집게)-430
	if(mode[1] == 1 && mode[4] == 1 && mode[2] == 1){
		MOTOR_PWM[1]++;
		if(MOTOR_PWM[1]>170){
			mode[1] = 2;
		}
		HAL_Delay(10);
	}
	if(mode[1] == 2 && mode[4] == 1 && mode[2] == 1){
		MOTOR_PWM[4]--;
		if(MOTOR_PWM[4]<160){
			mode[4] = 2;
		}
		HAL_Delay(10);
	}
	if(mode[1] == 2 && mode[4] == 2 && mode[2] == 1){
		MOTOR_PWM[2]--;
		if(MOTOR_PWM[2]<250){
			mode[1] = 1;
			mode[4] = 1;
			mode[2] = 2;
		}
		HAL_Delay(10);
	}
	if(mode[1] == 1 && mode[4] == 1 && mode[2] == 2){
		MOTOR_PWM[1]--;
		if(MOTOR_PWM[1]<120){
			mode[1] = 2;
		}
		HAL_Delay(10);
	}
	if(mode[1] == 2 && mode[4] == 1 && mode[2] == 2){
		MOTOR_PWM[4]++;
		if(MOTOR_PWM[4]>620){
			mode[4] = 2;
		}
		HAL_Delay(10);
	}
	if(mode[1] == 2 && mode[4] == 2 && mode[2] == 2){
		MOTOR_PWM[2]++;
		if(MOTOR_PWM[2]>430){
			mode[1] = 1;
			mode[4] = 1;
			mode[2] = 1;
		}
		HAL_Delay(10);
	}



//	if(mode[2] == 1){
//		MOTOR_PWM[2]--;
//		if(MOTOR_PWM[2]<216){
//			mode[2] = 0;
//		}
//		HAL_Delay(10);
//	}
//
//	if(mode[2] == 2){
//		MOTOR_PWM[2]++;
//		if(MOTOR_PWM[2]>445){
//			mode[2] = 1;
//		}
//		HAL_Delay(10);
//	}


//	 if(mode[4] == 1){
// 		 MOTOR_PWM[4]--;
// 		 if(MOTOR_PWM[4]<160)
// 			 mode[4]=2;
// 		 HAL_Delay(10);
// 	 }
//	 else if(mode[4]==2){
// 		 MOTOR_PWM[4]++;
// 		 if(MOTOR_PWM[4]>610)
// 			 mode[4]=0;
// 		 HAL_Delay(10);
// 	 }
}

void TEST0(void)
{	//pwm[1](관절3)-120, pwm[4](관절2)-620, pwm[2](집게)-430
	if(mode[1] == 1 && mode[4] == 1 && mode[2] == 1){
		MOTOR_PWM[4]--;
		if(MOTOR_PWM[4]<160){
			mode[4] = 2;
		}
		HAL_Delay(10);
	}
	else if(mode[1] == 1 && mode[4] == 2 && mode[2] == 1){
		if(MOTOR_PWM[4] < 400){
			MOTOR_PWM[1]++;
			MOTOR_PWM[4]++;
		}
		if(distance_flag){//distance <= 3
			mode[1] = 2;
		}
		HAL_Delay(100);
	}
	else if(mode[1] == 2 && mode[4] == 2 && mode[2] == 1){
		MOTOR_PWM[2]--;
		if(MOTOR_PWM[2]<310){//250
			mode[1] = 1;
			mode[4] = 1;
			mode[2] = 2;
		}
		HAL_Delay(10);
	}
	else if((mode[1] == 1 || mode[4] == 1) && mode[2] == 2){
		if(MOTOR_PWM[1]<120){
			mode[1] = 2;
		}
		else{
			MOTOR_PWM[1]--;
		}
		if(MOTOR_PWM[4]>620){
			mode[4] = 2;
		}
		else{
			MOTOR_PWM[4]++;
		}
		HAL_Delay(10);
	}

	else if(mode[1] == 2 && mode[4] == 2 && mode[2] == 2){
		//HAL_UART_Transmit(&huart2, &turn_right_go, 1, 100);
		MOTOR_PWM[2]++;
		if(MOTOR_PWM[2]>430){
			mode[1] = 1;
			mode[4] = 1;
			mode[2] = 1;
			distance_flag = false;
		}
		HAL_Delay(10);

	}

}

void TEST1(void)
{	//pwm[1](관절3)-120, pwm[4](관절2)-620, pwm[2](집게)-430
	if(mode[1] == 1 && mode[4] == 1 && mode[2] == 1 && mode[0] == 1){
		MOTOR_PWM[4]--;
		if(MOTOR_PWM[4]<160){
			mode[4] = 2;
		}
		HAL_Delay(10);
	}
	else if(mode[1] == 1 && mode[4] == 2 && mode[2] == 1 && mode[0] == 1){
		if(HAL_UART_Receive(&huart3, &direction, 1, 10) == HAL_OK){//direction datatype(?)
			if(direction == 'R'){
				MOTOR_PWM[0] -= 5;
				HAL_Delay(10);
			}
			else if(direction == 'L'){
				MOTOR_PWM[0] += 5;
				HAL_Delay(10);
			}
			else if(direction == 'E'){
				mode[0] = 2;
			}
		}
	}
	else if(mode[1] == 1 && mode[4] == 2 && mode[2] == 1 && mode[0] == 2){
		if(distance <= 3){//MOTOR_PWM[4]>300
			mode[1] = 2;
		}
		if(MOTOR_PWM[4] < 400){
			MOTOR_PWM[1]++;
			MOTOR_PWM[4]++;
		}
		HAL_Delay(50);
	}
	else if(mode[1] == 2 && mode[4] == 2 && mode[2] == 1 && mode[0] == 2){
		MOTOR_PWM[2]--;
		if(MOTOR_PWM[2]<250){//250
			response = 'C';
			HAL_UART_Transmit(&huart3, &response, 1, 10);
			mode[1] = 1;
			mode[4] = 1;
			mode[2] = 2;
		}
		HAL_Delay(10);
	}
	else if((mode[1] == 1 || mode[4] == 1) && mode[2] == 2 && mode[0] == 2){
		if(MOTOR_PWM[1]<120){
			mode[1] = 2;
		}
		else{
			MOTOR_PWM[1]--;
		}
		if(MOTOR_PWM[4]>620){
			mode[4] = 2;
		}
		else{
			MOTOR_PWM[4]++;
		}
		HAL_Delay(10);
	}
	else if(mode[1] == 2 && mode[4] == 2 && mode[2] == 2 && mode[0] == 2){
		MOTOR_PWM[2]++;
		if(MOTOR_PWM[2]>430){
			mode[1] = 0;
			mode[4] = 0;
			mode[2] = 0;
		}
		HAL_Delay(10);
	}

}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	//PWM
	MOTOR_PWM[0] = 620;//방향-정면(mid)
	MOTOR_PWM[1] = 120;//관절3-위로쭉(min)
	MOTOR_PWM[2] = 430;//집게-max
	MOTOR_PWM[3] = 350;//관절1-mid
	MOTOR_PWM[4] = 620;//관절2-뒤로 꺾임(max)

	MOTOR_PWM_MEAN[0] = 620;
	MOTOR_PWM_MEAN[1] = 400;
	MOTOR_PWM_MEAN[2] = 250;//에어팟 기준 (300->4cm)
	MOTOR_PWM_MEAN[3] = 350;
	MOTOR_PWM_MEAN[4] = 400;

	MOTOR_PWM_MAX[0] = 630;//left about 5 degree
	MOTOR_PWM_MAX[1] = 530;
	MOTOR_PWM_MAX[2] = 430;
	MOTOR_PWM_MAX[3] = 590;
	MOTOR_PWM_MAX[4] = 620;

	MOTOR_PWM_MIN[0] = 380;//right 90 degree
	MOTOR_PWM_MIN[1] = 120;
	MOTOR_PWM_MIN[2] = 215;
	MOTOR_PWM_MIN[3] = 110;
	MOTOR_PWM_MIN[4] = 160;
  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  MX_TIM3_Init();
  MX_TIM12_Init();
  MX_USB_HOST_Init();
  MX_TIM1_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */

  //Robot Arm
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);

  //SONAR
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);


  /*
  HAL_UART_Transmit(&huart2, &go_right, 1, 100);
  HAL_Delay(5000);
  HAL_UART_Transmit(&huart2, &go_left, 1, 100);
  HAL_Delay(5000);
  HAL_UART_Transmit(&huart2, &turn_right_go, 1, 100);
  HAL_Delay(10000);
  HAL_UART_Transmit(&huart2, &turn_right_stop, 1, 100);
  HAL_Delay(10000);
  HAL_UART_Transmit(&huart2, &turn_right_go, 1, 100);
  HAL_Delay(10000);
  HAL_UART_Transmit(&huart2, &turn_right_stop, 1, 100);
  */

  /* USER CODE END 2 */
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*
	  if(rx3_data != 0){
		 if(rx3_data == 4){
			 HAL_UART_Transmit(&huart2, &turn_right_stop, 1, 100);
		 }
		 rx3_data = 0;
	  }
	  */

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */


	if(distance <= 3){
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
	}


	// MOVE

	TIM3->CCR1=MOTOR_PWM[0];
	TIM3->CCR2=MOTOR_PWM[1];
	TIM3->CCR3=MOTOR_PWM[2];
	TIM12->CCR1=MOTOR_PWM[3];
	TIM12->CCR2=MOTOR_PWM[4];

	TEST0();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART3_IRQn);
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if(huart->Instance==USART3){
	  HAL_UART_Receive_IT(&huart3,&rx3_data,1);
  }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
